<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<!--
~ Copyright 2014 Danilo Reinert
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>
  <g:HTMLPanel>
    <!-- REQUEST INTERCEPTOR SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="request-interceptors">Request Interceptors</h1>
      <p class="lead">
        Request Interceptors allow the manipulation of payloads immediately before sending the requests.
      </p>

      <p>
        It is useful for appending security characters in serialized payloads, encode, compress, etc.
      </p>

      <p>
        Suppose we register the following interceptor in the requestor, appending some chars in the beginning.
      </p>
      <div class="highlight">
        <pre ui:field="requestInterceptor" class="java">
          <code>requestor.addRequestInterceptor(new RequestInterceptor() {
            <br/>&#32;&#32;&#32;&#32;public void intercept(RequestInterceptorContext context) {
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;final String json = context.getPayload().isString();
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* Make sure the payload is a serialized json */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if (json != null) {
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* Add )]}',\n to the beginning of json payloads */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.setPayload(new Payload(&quot;)]}',\\n&quot; + json));
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
            <br/>&#32;&#32;&#32;&#32;}
            <br/>});
          </code>
        </pre>
      </div>

      <p>
        Now let's perform a request, and check if the payload was really transformed.
        <br/>
        The data property should contain the json with the appended chars at the beginning.
      </p>
      <div class="highlight">
        <pre ui:field="requestInterceptorReq" class="java">
          <code>JavaScriptObject json = getMessageJson(&quot;Requestor is awesome!&quot;);
            <br/>requestor.req(&quot;http://httpbin.org/post&quot;).payload(json).post();</code>
        </pre>
      </div>

      <g:HTMLPanel styleName="action-panel">
        <g:HTMLPanel styleName="action">
          <g:Button ui:field="requestInterceptorButton" styleName="btn">POST</g:Button>
        </g:HTMLPanel>
        <textarea ui:field="requestInterceptorTextArea" class="form-control result" rows="4" readonly="readonly"/>
      </g:HTMLPanel>

      <p>
        The Request Interceptors are applied following the same order they are registered in the requestor.
        <br/>
        They are executed after the requests are serialized, so they only manipulate serialized payloads,
        represented by the <code>Payload</code> object.
      </p>
    </g:HTMLPanel>


    <!-- RESPONSE INTERCEPTOR SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="response-interceptors">Response Interceptors</h1>
      <p class="lead">
        Response Interceptors allow manipulation of payloads after receiving responses.
      </p>

      <p>
        It is useful for removing security characters in serialized payloads, decode, uncompress, etc.
      </p>

      <p>
        Suppose we register the following response interceptor in the requestor, removing the first six security chars.
      </p>
      <div class="highlight">
        <pre ui:field="responseInterceptor" class="java">
          <code>requestor.addResponseInterceptor(new ResponseInterceptor() {
            <br/>&#32;&#32;&#32;&#32;public void intercept(Request request, ResponseInterceptorContext context) {
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;final String json = context.getPayload().isString();
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* Make sure the payload is a serialized json */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if (json != null) {
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* Remove first 6 chars )]}',\n */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.setPayload(new Payload(json.substring(6)));
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
            <br/>&#32;&#32;&#32;&#32;}
            <br/>});
          </code>
        </pre>
      </div>

      <p>
        Now let's perform a request, and check if the previous interceptor was really executed.
        <br/>
        The mocked endpoint <strong>http://www.mocky.io/v2/54a3ec74fd145c6c0195e912</strong> gives us the raw response <code>)]}',\n{ "message": "Requestor is awesome! \o/" }</code>.
        The interceptor should remove the first six characters.
      </p>
      <div class="highlight">
        <pre ui:field="responseInterceptorReq" class="java">
          <code>requestor.req(&quot;http://www.mocky.io/v2/54a3ec74fd145c6c0195e912&quot;).get();</code>
        </pre>
      </div>

      <g:HTMLPanel styleName="action-panel">
        <div class="action">
          <g:Button ui:field="responseInterceptorButton" styleName="btn">GET</g:Button>
        </div>
        <textarea ui:field="responseInterceptorTextArea" class="form-control result" rows="2" readonly="readonly"/>
      </g:HTMLPanel>

      <p>
        See in you browser dev tools that the raw response had the initial &quot;)]}',\n&quot; chars.
      </p>

      <p>
        The Response Interceptors are applied following the same order they are registered in the requestor.
        <br/>
        They are executed after the filters and before the deserialization.
      </p>
    </g:HTMLPanel>

  </g:HTMLPanel>
</ui:UiBinder>