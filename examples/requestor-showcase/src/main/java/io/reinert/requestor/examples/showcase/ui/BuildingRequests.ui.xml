<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<!--
~ Copyright 2014 Danilo Reinert
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>
  <g:HTMLPanel>
    <!-- START SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="start-building">Start building</h1>
      <p class="lead">
        <code>Requestor</code> object provides the <code>#req</code> method to start building a request.
        A target url is required by it.
      </p>
      <div class="highlight">
        <pre ui:field="req" class="java">
          <code>
            Requestor r = GWT.create(Requestor); <br/>
            RequestBuilder reqBuilder = r.req(&quot;/target&quot;);
          </code>
        </pre>
      </div>

      <p style="margin-bottom: 0">
        Note: <code>Requestor#req</code> returns a <code>RequestInvoker</code> which inherits from <code>RequestBuilder</code> but has additional dispatching capabilities.
      </p>
    </g:HTMLPanel>

    <!-- HEADERS SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="headers">Headers</h1>
      <p class="lead">
        Handful methods are provided to add header to the request.
      </p>

      <div class="requestor-showcase-innersection">
        <h3>#header(String, String)</h3>
        <p>
          This method allows you to add a headers to the request by simply specifying it's name and value.
        </p>
        <div class="highlight">
          <pre ui:field="header1" class="java">
            <code>
              reqBuilder.header("Content-Type", "application/json; charset=utf-8");
            </code>
          </pre>
        </div>
      </div>

      <div class="requestor-showcase-innersection">
        <h3>#header(Header)</h3>
        <p>
          Alternatively, you can add a <code>Header</code> to the request.
          The Header type has several childs representing different kind of headers.
          Some of them are: <code>SimpleHeader</code>, <code>SimpleHeaderWithParameter</code>,
          <code>MultivaluedHeader</code>, <code>QualityFactorHeader</code>, <code>ContentTypeHeader</code>,
          <code>AcceptHeader</code>.
        </p>
        <div class="highlight">
          <pre ui:field="header2" class="java">
            <code>
              reqBuilder.header(new ContentTypeHeader("application/json", Param.of("charset", "utf-8")));
            </code>
          </pre>
        </div>
      </div>

      <div class="requestor-showcase-innersection">
        <h3>#contentType(String)</h3>
        <p>
          This method is a shortcut for setting the Content-Type header.
        </p>
        <div class="highlight">
          <pre ui:field="header3" class="java">
            <code>
              reqBuilder.contentType("application/json; charset=utf-8");
            </code>
          </pre>
        </div>
      </div>

      <div class="requestor-showcase-innersection">
        <h3>#accept(String)</h3>
        <p>
          This method is a shortcut for setting the Accept header.
        </p>
        <div class="highlight">
          <pre ui:field="header4" class="java">
            <code>
              reqBuilder.accept("application/json, text/plain; q=0.8");
            </code>
          </pre>
        </div>
      </div>
    </g:HTMLPanel>

    <!-- TIMEOUT SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="timeout">Timeout</h1>
      <p class="lead">
        The <code>#timeout</code> method allows you to set the timeout (in milliseconds) of the request.
      </p>
      <div class="highlight">
        <pre ui:field="timeout" class="java">
          <code>
            reqBuilder.timeout(60000); // set the timeout to 1 min
          </code>
        </pre>
      </div>
    </g:HTMLPanel>

    <!-- RESPONSE TYPE SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="responseType">Response Type</h1>
      <p class="lead">
        Set the expected responseType of the request.
      </p>
      <div class="highlight">
        <pre ui:field="responseType" class="java">
          <code>
            reqBuilder.responseType(ResponseType.BLOB); // expect a blob in the response payload
          </code>
        </pre>
      </div>
      <p>
        The responseType of the request will determine how the response entity body will be parsed.
        It is usefull when you want to retrieve other data type than text.
        <br/>
        The <code>#responseType</code> method accepts a value from the <code>ResponseType</code> enumeration.
        The possible values are: <code>ARRAY_BUFFER</code>, <code>BLOB</code>, <code>DOCUMENT</code>, <code>JSON</code>, <code>TEXT</code> and <code>DEFAULT</code>.
        <br/>
        Check <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#responseType" target="_blank">MDN</a> for more details.
      </p>
    </g:HTMLPanel>

    <!-- PAYLOAD SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="payload">Payload</h1>
      <p class="lead">
        Set the request payload (entity body).
      </p>
      <p>
        With the <code>#payload</code> method you can fill the request with an object which will be later serialized to the body of the HTTP request.
      </p>
      <div class="highlight">
        <pre ui:field="payload1" class="java">
          <code>
            reqBuilder.payload(anyObject);
          </code>
        </pre>
      </div>
      <p>
        See the <a href="#serialization">Serialization</a> page to understand how this object will be serialized.
      </p>
      <p>
        You can skip serialization of the payload by setting a <code>Payload</code> object as the request payload.
        <br/>
        The <code>Payload</code> type represents the already serialized entity body of a request/response.
        <br/>
        It can be a <code>String</code> (serialized text) or a <code>JavaScriptObject</code> (some native type supported by XHR like a Blob, an ArrayBuffer, a Document, etc.).
      </p>
      <div class="highlight">
        <pre ui:field="payload2" class="java">
          <code>
            JavaScriptObject blob = getBlob(); <br/>
            reqBuilder.payload(new Payload(blob)); // this payload will compose the request as raw data
          </code>
        </pre>
      </div>
      <p>
        Check <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#send()" target="_blank">MDN</a> for more details.
      </p>
    </g:HTMLPanel>

    <!-- AUTH SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="auth">Auth (Authentication)</h1>
      <p class="lead">
        Inform how the request should be authenticated.
      </p>
      <p>
        Requestor allows you to easily specify the authentication procedure for your requests.
        <br/>
        The HTTP BASIC authentication method is already implemented in the API, so you can use it nicely.
        <!--This feature was carefully designed to be as simple and extensible as possible, allowing one to set whatever authentication worflow necessary at the same time not requiring expensive coding.-->
        <!--<br/>-->
        <!--Any authentication procedure must implement the <code>Authentication</code> class, which is simple-->
      </p>
      <div class="highlight">
        <pre ui:field="auth1" class="java">
          <code>
            reqBuilder.auth(new BasicAuth("user", "passwd"));
          </code>
        </pre>
      </div>
      <p>
        Any authentication procedure can be coded by implementing the <code>Authentication</code> class.
      </p>
      <div class="highlight">
        <pre ui:field="auth2" class="java">
          <code>
            reqBuilder.auth(new MyCustomAuth(someId, someKey));
          </code>
        </pre>
      </div>
    </g:HTMLPanel>

  </g:HTMLPanel>
</ui:UiBinder>